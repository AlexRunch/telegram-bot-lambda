import json
import boto3
import nest_asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
bot_token = '7512734081:AAGVNe3SGMdY1AnaJwu6_mN4bKTxp3Z7hJs'
s3_bucket_name = 'telegram-bot-subscribers'

s3_client = boto3.client('s3')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    logger.debug("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start")
    application.add_handler(CommandHandler("start", start))
    logger.debug("–ö–æ–º–∞–Ω–¥–∞ /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    logger.debug("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É polling")

    # –ó–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    await application.initialize()
    await application.start()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    await check_subscribers(application)
    
    # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã
    await asyncio.sleep(60)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await check_subscribers(application)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AWS Lambda
def lambda_handler(event, context):
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        nest_asyncio.apply()
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–ª–µ–∫—Å–µ–π, –ø—Ä–∏–≤–µ—Ç!")

async def check_subscribers(application):
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∏–∑ S3
def load_subscribers():
    try:
        obj = s3_client.get_object(Bucket=s3_bucket_name, Key='subscribers.json')
        return json.loads(obj['Body'].read())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3: {e}")
        return {"subscribers": []}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –≤ S3
def save_subscribers(data):
    try:
        s3_client.put_object(Bucket=s3_bucket_name, Key='subscribers.json', Body=json.dumps(data))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ S3: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
def generate_report(added, removed, total):
    date_str = (datetime.now() + timedelta(hours=3)).strftime('%d %B %Y')
    report = f"üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∏ –æ—Ç–ø–∏—Å–∫–∞–º\n\n–î–∞—Ç–∞: {date_str}\n\n"

    if added:
        report += f"üîî –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ({len(added)}):\n"
        for user in added:
            report += f"1. @{user} (–ø–æ–¥–ø–∏—Å–∞–Ω)\n"
    else:
        report += "üîî –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: –ù–µ—Ç\n"

    if removed:
        report += f"\nüö´ –û—Ç–ø–∏—Å–∞–≤—à–∏–µ—Å—è ({len(removed)}):\n"
        for user in removed:
            report += f"1. @{user} (–æ—Ç–ø–∏—Å–∞–ª—Å—è)\n"
    else:
        report += "\nüö´ –û—Ç–ø–∏—Å–∞–≤—à–∏–µ—Å—è: –ù–µ—Ç\n"

    report += f"\nüìà –ò—Ç–æ–≥: \n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total}\n–†–∞–∑–Ω–∏—Ü–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {len(added) - len(removed)}"

    return report

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
async def get_current_subscribers():
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    return []

if __name__ == '__main__':
    lambda_handler(None, None)
